@page "/"
@rendermode InteractiveServer
@inject ApiConfig ApiConfig
@inject HttpClient Http

<PageTitle>NetFrames - Home</PageTitle>

<h1>Photo Collection</h1>

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (imageIds?.Any() == true)
{
    <div class="image-grid">
        @foreach (var id in imageIds)
        {
            <div class="image-container">
                <input type="checkbox" class="image-checkbox" />
                <img src="@($"{ApiConfig.BaseUrl}/images/{id}")"
                     class="grid-image"
                     @onclick="() => ShowModal(id)"
                     alt="Gallery image" />
            </div>
        }
    </div>
}
else
{
    <p>No images found.</p>
}

@if (showModal)
{
    <div class="modal-backdrop" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div>
                <img 
                    src="@($"{ApiConfig.BaseUrl}/images/{selectedId}")"
                    class="modal-image" 
                    alt="Large view" />
            </div>

            <div style="display: flex; align-items: center; margin-top: 10px; width:100%">
                <p style="flex: 1; margin: 0;">image_2025_04_21.jpg</p>
                <button class="trash-btn" @onclick="DeleteImage" title="Delete image" style="margin-left: auto;">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private bool showModal = false;
    private string? selectedId;
    private List<string>? imageIds;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            imageIds = await Http.GetFromJsonAsync<List<string>>($"{ApiConfig.BaseUrl}/images/list");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowModal(string id)
    {
        selectedId = id;
        showModal = true;
    }

    private async Task DeleteImage()
    {
        if (selectedId is null)
            return;

        var response = await Http.DeleteAsync($"{ApiConfig.BaseUrl}/images/{selectedId}");
        if (response.IsSuccessStatusCode)
        {
            imageIds?.Remove(selectedId);
            showModal = false;
            StateHasChanged();
        }
        else
        {
            // Optionally show an error message
        }
    }

    private void CloseModal()
    {
        showModal = false;
    }
}
